package cyfrowePrzetwarzanieSygnalu;



import static cyfrowePrzetwarzanieSygnalu.OperacjeNaPlikach.importFromFile;
import static cyfrowePrzetwarzanieSygnalu.OperacjeNaPlikach.saveToFile;
import static cyfrowePrzetwarzanieSygnalu.SygnalOperacje.addingSignals;
import static cyfrowePrzetwarzanieSygnalu.SygnalOperacje.divisionSignals;
import static cyfrowePrzetwarzanieSygnalu.SygnalOperacje.multiplySignals;
import static cyfrowePrzetwarzanieSygnalu.SygnalOperacje.substractSignals;


import java.awt.event.ActionEvent;
import java.io.File;
import java.util.ArrayList;

import javax.swing.DefaultListModel;
import javax.swing.JList;


public class MainWindow extends javax.swing.JFrame {

    private static double Amplituda = 0;
    private static double tBegin = 0;
    private static double signalTime = 0;
    private static double interval = 0;     // okres
    private static double kw = 0;           // wspolczynnik wypelnienia
    private static double ts = 0;           // czas skoku
    private static int ns = 0;              // numer probki dla ktorej nastepuje skok amplitudy
    private static int samples = 0;         // ilosc probek
    private static int freq = 0;            // czestotliwosc probkowania
    private static double probability = 0;  // prawdopodobienstwo wystapienia skoku
    private static int histogramCompartments = 0;
    private static Sygnal signal = new Sygnal();
    private DefaultListModel model = new DefaultListModel(); // model do jList

    private static ArrayList<Sygnal> signalList = new ArrayList<Sygnal>(); // arraylista przechowujaca wygenerowane sygnaly

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooserOpenFile = new javax.swing.JFileChooser();
        jFileChooserSaveFile = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new JList(model);
        choiceSignal = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        valueAmplituda = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        valueTbegin = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        valueSignalTime = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        valueInterval = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        valueKw = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        valueTs = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        valueNs = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        valueSamples = new javax.swing.JTextField();
        valueFreq = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        valueProbability = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        valueHistogramCompartments = new javax.swing.JTextField();
        ButtonGenerateSignal = new javax.swing.JButton();
        ButtonShowSignalChart = new javax.swing.JButton();
        ButtonAddSignals = new javax.swing.JButton();
        ButtonSubtraction = new javax.swing.JButton();
        ButtonMultiplication = new javax.swing.JButton();
        ButtonDivision = new javax.swing.JButton();
        ButtonSave2 = new javax.swing.JButton();
        ButtonOpen = new javax.swing.JButton();

        jFileChooserSaveFile.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 12));
        jLabel1.setText(" Dobromir Kata   Alicja Anszpergier ");

        jList1.setFont(new java.awt.Font("Tahoma", 0, 12));
        jList1.setName("");
        jScrollPane1.setViewportView(jList1);

        choiceSignal.setFont(new java.awt.Font("Verdana", 0, 11));
        choiceSignal.setMaximumRowCount(20);
        choiceSignal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Rozklad jednostajny",
                "Szum Gaussowski", "Sygnal sinusoidalny", "Sygnal sinusoidalny wyprostowany jednopolowkowo",
                "Sygnal sinusoidalny wyprostowany dwupolowkowo", "Sygnal prostokatny", "Sygnal prostokatny symetryczny",
                "Sygnal trojkatny", "Skok jednostkowy", "Impuls jednostkowy", "Szum impulsowy" }));
        choiceSignal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceSignalActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 12));
        jLabel2.setText("WYBÓR:");

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 12));
        jLabel3.setText("PARAMETRY:");

        jLabel5.setText("Amplituda:");
        jLabel5.setAlignmentX(0.5F);

        valueAmplituda.setFont(new java.awt.Font("Verdana", 0, 12));
        valueAmplituda.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        valueAmplituda.setText("1");                                                //setText("Amplituda");
        valueAmplituda.setEnabled(false);
        valueAmplituda.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                valueAmplitudaFocusGained(evt);
            }
        });
        valueAmplituda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                valueAmplitudaMouseClicked(evt);
            }
        });

        jLabel6.setText("Czas poczatkowy:");

        valueTbegin.setFont(new java.awt.Font("Verdana", 0, 10)); //
        valueTbegin.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        valueTbegin.setText("0");  //default        //setText("Czas pocz.");
        valueTbegin.setEnabled(false);
        valueTbegin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                valueTbeginFocusGained(evt);
            }
        });
        valueTbegin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                valueTbeginMouseClicked(evt);
            }
        });

        jLabel4.setText("Czas sygnalu:");

        valueSignalTime.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        valueSignalTime.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        valueSignalTime.setText("10");//setText("Czas sygnału");
        valueSignalTime.setEnabled(false);
        valueSignalTime.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                valueSignalTimeFocusGained(evt);
            }
        });
        valueSignalTime.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                valueSignalTimeMouseClicked(evt);
            }
        });

        jLabel7.setText("Okres:");

        valueInterval.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        valueInterval.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        valueInterval.setText("5");//setText("Okres");
        valueInterval.setEnabled(false);
        valueInterval.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                valueIntervalFocusGained(evt);
            }
        });
        valueInterval.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                valueIntervalMouseClicked(evt);
            }
        });

        jLabel8.setText("Wspolczynnik wypelnienia:");

        valueKw.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        valueKw.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        valueKw.setText("Wsp. wyp.");
        valueKw.setEnabled(false);
        valueKw.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                valueKwFocusGained(evt);
            }
        });
        valueKw.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                valueKwMouseClicked(evt);
            }
        });

        jLabel9.setText("Czas skoku:");

        valueTs.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        valueTs.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        valueTs.setText("Czas skoku");
        valueTs.setEnabled(false);
        valueTs.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                valueTsFocusGained(evt);
            }
        });
        valueTs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                valueTsMouseClicked(evt);
            }
        });

        jLabel10.setText("Probka skoku:");

        valueNs.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        valueNs.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        valueNs.setText("Prob. sko.");
        valueNs.setEnabled(false);
        valueNs.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                valueNsFocusGained(evt);
            }
        });
        valueNs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                valueNsMouseClicked(evt);
            }
        });

        jLabel11.setText("Ilosc probek:");

        valueSamples.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        valueSamples.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        valueSamples.setText("Il. prob.");
        valueSamples.setEnabled(false);
        valueSamples.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                valueSamplesFocusGained(evt);
            }
        });
        valueSamples.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                valueSamplesMouseClicked(evt);
            }
        });

        valueFreq.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        valueFreq.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        valueFreq.setText("Cz. prob.");
        valueFreq.setEnabled(false);
        valueFreq.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                valueFreqFocusGained(evt);
            }
        });
        valueFreq.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                valueFreqMouseClicked(evt);
            }
        });

        jLabel12.setText("Czestotliwosc:");

        jLabel13.setText("Prawdopodobienstwo:");

        valueProbability.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        valueProbability.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        valueProbability.setText("Prawdopod.");
        valueProbability.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        valueProbability.setEnabled(false);
        valueProbability.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                valueProbabilityFocusGained(evt);
            }
        });
        valueProbability.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                valueProbabilityMouseClicked(evt);
            }
        });

        jLabel17.setText("Ilosc przedzialow histogramu:");

        valueHistogramCompartments.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        valueHistogramCompartments.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        valueHistogramCompartments.setText("Il. przedz.");
        valueHistogramCompartments.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        valueHistogramCompartments.setEnabled(false);
        valueHistogramCompartments.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                valueHistogramCompartmentsFocusGained(evt);
            }
        });
        valueHistogramCompartments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                valueHistogramCompartmentsMouseClicked(evt);
            }
        });
        valueHistogramCompartments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueHistogramCompartmentsActionPerformed(evt);
            }
        });

        ButtonGenerateSignal.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        ButtonGenerateSignal.setText("GENERUJ");
        ButtonGenerateSignal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonGenerateSignalActionPerformed(evt);
            }
        });
        ButtonGenerateSignal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ButtonGenerateSignalKeyPressed(evt);
            }
        });

        ButtonShowSignalChart.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        ButtonShowSignalChart.setText("WYSWIETL");
        ButtonShowSignalChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonShowSignalChartActionPerformed(evt);
            }
        });
        ButtonShowSignalChart.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ButtonShowSignalChartKeyPressed(evt);
            }
        });

        ButtonAddSignals.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        ButtonAddSignals.setText("DODAWANIE");
        ButtonAddSignals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddSignalsActionPerformed(evt);
            }
        });

        ButtonSubtraction.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        ButtonSubtraction.setText("ODEJMOWANIE");
        ButtonSubtraction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSubtractionActionPerformed(evt);
            }
        });

        ButtonMultiplication.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        ButtonMultiplication.setText("MNOZENIE");
        ButtonMultiplication.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonMultiplicationActionPerformed(evt);
            }
        });

        ButtonDivision.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        ButtonDivision.setText("DZIELENIE");
        ButtonDivision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDivisionActionPerformed(evt);
            }
        });

        ButtonSave2.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        ButtonSave2.setText("Zapisz");
        ButtonSave2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSave2ActionPerformed(evt);
            }
        });

        ButtonOpen.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        ButtonOpen.setText("Wczytaj");
        ButtonOpen.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonOpenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
                .createSequentialGroup().addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                        .addGroup(layout.createSequentialGroup().addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(ButtonGenerateSignal, javax.swing.GroupLayout.DEFAULT_SIZE, 87,
                                                Short.MAX_VALUE)
                                        .addComponent(ButtonSave2, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(ButtonShowSignalChart, javax.swing.GroupLayout.DEFAULT_SIZE, 99,
                                                Short.MAX_VALUE)
                                        .addComponent(ButtonOpen, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout
                                                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(ButtonDivision, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(ButtonAddSignals, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        137, Short.MAX_VALUE)
                                                .addComponent(ButtonMultiplication,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(ButtonSubtraction, javax.swing.GroupLayout.Alignment.TRAILING,
                                                javax.swing.GroupLayout.PREFERRED_SIZE, 137,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49,
                                        Short.MAX_VALUE)
                                .addGroup(
                                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout
                                                        .createSequentialGroup().addGroup(layout
                                                                .createParallelGroup(
                                                                        javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(jLabel5).addComponent(jLabel6)
                                                                .addComponent(jLabel4).addComponent(jLabel7))
                                                        .addGap(59, 59, 59)
                                                        .addGroup(layout
                                                                .createParallelGroup(
                                                                        javax.swing.GroupLayout.Alignment.LEADING,
                                                                        false)
                                                                .addComponent(valueSignalTime).addComponent(valueTbegin)
                                                                .addComponent(
                                                                        valueAmplituda,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE, 62,
                                                                        Short.MAX_VALUE)
                                                                .addComponent(valueInterval)))
                                                .addGroup(layout.createSequentialGroup().addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel8).addComponent(jLabel9)
                                                        .addComponent(
                                                                jLabel10)
                                                        .addComponent(jLabel11).addComponent(jLabel12)
                                                        .addComponent(jLabel13)).addGap(18, 18, 18)
                                                        .addGroup(layout
                                                                .createParallelGroup(
                                                                        javax.swing.GroupLayout.Alignment.LEADING,
                                                                        false)
                                                                .addComponent(valueProbability,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 1,
                                                                        Short.MAX_VALUE)
                                                                .addComponent(valueFreq).addComponent(valueSamples)
                                                                .addComponent(valueNs).addComponent(valueKw)
                                                                .addComponent(valueTs,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE, 61,
                                                                        Short.MAX_VALUE)))
                                                .addGroup(layout.createSequentialGroup().addComponent(jLabel17)
                                                        .addPreferredGap(
                                                                javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(valueHistogramCompartments,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE, 62,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 89,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout
                                                .createSequentialGroup()
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 130,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(121, 121, 121))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout
                                                .createSequentialGroup()
                                                .addComponent(choiceSignal, javax.swing.GroupLayout.PREFERRED_SIZE, 250,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap())))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup().addGap(54, 54, 54)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(400, Short.MAX_VALUE))));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                javax.swing.GroupLayout.Alignment.TRAILING,
                layout.createSequentialGroup().addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2).addGap(1, 1, 1)
                        .addComponent(choiceSignal, javax.swing.GroupLayout.PREFERRED_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5).addComponent(valueAmplituda,
                                        javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6).addComponent(valueTbegin, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(valueSignalTime, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(valueInterval, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(valueKw, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(valueTs, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
                                .createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(valueNs, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel10).addComponent(ButtonAddSignals))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(valueSamples, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel11).addComponent(ButtonSubtraction))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel12).addComponent(ButtonMultiplication))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(valueFreq, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(valueProbability,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel13).addComponent(ButtonDivision))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel17).addComponent(valueHistogramCompartments,
                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup().addGroup(layout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(ButtonShowSignalChart, javax.swing.GroupLayout.PREFERRED_SIZE, 29,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(ButtonGenerateSignal, javax.swing.GroupLayout.PREFERRED_SIZE, 31,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout
                                                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(ButtonSave2, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(ButtonOpen, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(84, 84, 84).addComponent(jLabel1).addContainerGap())
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup().addGap(3, 3, 3)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 199,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(258, Short.MAX_VALUE))));

        ButtonSave2.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void choiceSignalActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_choiceSignalActionPerformed
        int signalNumber = choiceSignal.getSelectedIndex() + 1;

        if (signalNumber >= 1 && signalNumber <= 2) {
            valueAmplituda.setEnabled(true);
            valueTbegin.setEnabled(true);
            valueSignalTime.setEnabled(true);
            valueInterval.setEnabled(false);
            valueKw.setEnabled(false);
            valueTs.setEnabled(false);
            valueNs.setEnabled(false);
            valueSamples.setEnabled(false);
            valueFreq.setEnabled(true);
            valueProbability.setEnabled(false);
            valueHistogramCompartments.setEnabled(true);
        } else if (signalNumber >= 3 && signalNumber <= 5) {
            valueAmplituda.setEnabled(true);
            valueTbegin.setEnabled(true);
            valueSignalTime.setEnabled(true);
            valueInterval.setEnabled(true);
            valueKw.setEnabled(false);
            valueTs.setEnabled(false);
            valueNs.setEnabled(false);
            valueSamples.setEnabled(false);
            valueFreq.setEnabled(true);
            valueProbability.setEnabled(false);
            valueHistogramCompartments.setEnabled(true);
        } else if (signalNumber >= 6 && signalNumber <= 8) {
            valueAmplituda.setEnabled(true);
            valueTbegin.setEnabled(true);
            valueSignalTime.setEnabled(true);
            valueInterval.setEnabled(true);
            valueKw.setEnabled(true);
            valueTs.setEnabled(false);
            valueNs.setEnabled(false);
            valueSamples.setEnabled(false);
            valueFreq.setEnabled(true);
            valueProbability.setEnabled(false);
            valueHistogramCompartments.setEnabled(true);
        } else if (signalNumber == 9) {
            valueAmplituda.setEnabled(true);
            valueTbegin.setEnabled(true);
            valueSignalTime.setEnabled(true);
            valueInterval.setEnabled(false);
            valueKw.setEnabled(false);
            valueTs.setEnabled(true);
            valueNs.setEnabled(false);
            valueSamples.setEnabled(false);
            valueFreq.setEnabled(true);
            valueProbability.setEnabled(false);
            valueHistogramCompartments.setEnabled(true);
        } else if (signalNumber == 10) {
            valueAmplituda.setEnabled(true);
            valueTbegin.setEnabled(true);
            valueSignalTime.setEnabled(false);
            valueInterval.setEnabled(false);
            valueKw.setEnabled(false);
            valueTs.setEnabled(false);
            valueNs.setEnabled(true);
            valueSamples.setEnabled(true);
            valueFreq.setEnabled(true);
            valueProbability.setEnabled(false);
            valueHistogramCompartments.setEnabled(true);
        } else if (signalNumber == 11) {
            valueAmplituda.setEnabled(true);
            valueTbegin.setEnabled(true);
            valueSignalTime.setEnabled(true);
            valueInterval.setEnabled(false);
            valueKw.setEnabled(false);
            valueTs.setEnabled(false);
            valueNs.setEnabled(false);
            valueSamples.setEnabled(false);
            valueFreq.setEnabled(true);
            valueProbability.setEnabled(true);
            valueHistogramCompartments.setEnabled(true);
        }
    }// GEN-LAST:event_choiceSignalActionPerformed

    private void valueAmplitudaFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_valueAmplitudaFocusGained
        valueAmplituda.setText("");
    }// GEN-LAST:event_valueAmplitudaFocusGained

    private void valueAmplitudaMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_valueAmplitudaMouseClicked
        valueAmplituda.setText("");
    }// GEN-LAST:event_valueAmplitudaMouseClicked

    private void valueTbeginFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_valueTbeginFocusGained
        valueTbegin.setText("");
    }// GEN-LAST:event_valueTbeginFocusGained

    private void valueTbeginMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_valueTbeginMouseClicked
        valueTbegin.setText("");
    }// GEN-LAST:event_valueTbeginMouseClicked

    private void valueSignalTimeFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_valueSignalTimeFocusGained
        valueSignalTime.setText("");
    }// GEN-LAST:event_valueSignalTimeFocusGained

    private void valueSignalTimeMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_valueSignalTimeMouseClicked
        valueSignalTime.setText("");
    }// GEN-LAST:event_valueSignalTimeMouseClicked

    private void valueIntervalFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_valueIntervalFocusGained
        valueInterval.setText("");
    }// GEN-LAST:event_valueIntervalFocusGained

    private void valueIntervalMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_valueIntervalMouseClicked
        valueInterval.setText("");
    }// GEN-LAST:event_valueIntervalMouseClicked

    private void valueKwFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_valueKwFocusGained
        valueKw.setText("");
    }// GEN-LAST:event_valueKwFocusGained

    private void valueKwMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_valueKwMouseClicked
        valueKw.setText("");
    }// GEN-LAST:event_valueKwMouseClicked

    private void valueTsFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_valueTsFocusGained
        valueTs.setText("");
    }// GEN-LAST:event_valueTsFocusGained

    private void valueTsMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_valueTsMouseClicked
        valueTs.setText("");
    }// GEN-LAST:event_valueTsMouseClicked

    private void valueNsFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_valueNsFocusGained
        valueNs.setText("");
    }// GEN-LAST:event_valueNsFocusGained

    private void valueNsMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_valueNsMouseClicked
        valueNs.setText("");
    }// GEN-LAST:event_valueNsMouseClicked

    private void valueSamplesFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_valueSamplesFocusGained
        valueSamples.setText("");
    }// GEN-LAST:event_valueSamplesFocusGained

    private void valueSamplesMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_valueSamplesMouseClicked
        valueSamples.setText("");
    }// GEN-LAST:event_valueSamplesMouseClicked

    private void valueFreqFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_valueFreqFocusGained
        valueFreq.setText("");
    }// GEN-LAST:event_valueFreqFocusGained

    private void valueFreqMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_valueFreqMouseClicked
        valueFreq.setText("");
    }// GEN-LAST:event_valueFreqMouseClicked

    private void valueProbabilityFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_valueProbabilityFocusGained
        valueProbability.setText("");
    }// GEN-LAST:event_valueProbabilityFocusGained

    private void valueProbabilityMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_valueProbabilityMouseClicked
        valueProbability.setText("");
    }// GEN-LAST:event_valueProbabilityMouseClicked

    private void valueHistogramCompartmentsFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_valueHistogramCompartmentsFocusGained
        valueHistogramCompartments.setText("");
    }// GEN-LAST:event_valueHistogramCompartmentsFocusGained

    private void valueHistogramCompartmentsMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_valueHistogramCompartmentsMouseClicked
        valueHistogramCompartments.setText("");
    }// GEN-LAST:event_valueHistogramCompartmentsMouseClicked

    private void valueHistogramCompartmentsActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_valueHistogramCompartmentsActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_valueHistogramCompartmentsActionPerformed

    private void ButtonGenerateSignalActionPerformed(ActionEvent evt) {// GEN-FIRST:event_ButtonGenerateSignalActionPerformed
        int choice = choiceSignal.getSelectedIndex() + 1;
        Amplituda = Double.parseDouble(valueAmplituda.getText());
        tBegin = Double.parseDouble(valueTbegin.getText());
        freq = Integer.parseInt(valueFreq.getText());
        histogramCompartments = Integer.parseInt(valueHistogramCompartments.getText());

        switch (choice) {
            case 1:
                signalTime = Double.parseDouble(valueSignalTime.getText());
                signal = new SzumRozkladJednostajny(Amplituda, tBegin, signalTime, freq);
                break;
            case 2:
                signalTime = Double.parseDouble(valueSignalTime.getText());
                signal = new SzumRozkladGaussa(Amplituda, tBegin, signalTime, freq);
                break;
            case 3:
                signalTime = Double.parseDouble(valueSignalTime.getText());
                interval = Double.parseDouble(valueInterval.getText());
                signal = new SygnalSinus(Amplituda, tBegin, signalTime, interval, freq);
                break;
            case 4:
                signalTime = Double.parseDouble(valueSignalTime.getText());
                interval = Double.parseDouble(valueInterval.getText());
                signal = new SygnalSinusJednopolowkowy(Amplituda, tBegin, signalTime, interval, freq);
                break;
            case 5:
                signalTime = Double.parseDouble(valueSignalTime.getText());
                interval = Double.parseDouble(valueInterval.getText());
                signal = new SygnalSinusDwupolowkowy(Amplituda, tBegin, signalTime, interval, freq);
                break;
            case 6:
                signalTime = Double.parseDouble(valueSignalTime.getText());
                interval = Double.parseDouble(valueInterval.getText());
                kw = Double.parseDouble(valueKw.getText());
                signal = new SygnalProstokatny(Amplituda, tBegin, signalTime, interval, kw, freq);
                break;
            case 7:
                signalTime = Double.parseDouble(valueSignalTime.getText());
                interval = Double.parseDouble(valueInterval.getText());
                kw = Double.parseDouble(valueKw.getText());
                signal = new SygnalProstokatnySymetryczny(Amplituda, tBegin, signalTime, interval, kw, freq);
                break;
            case 8:
                signalTime = Double.parseDouble(valueSignalTime.getText());
                interval = Double.parseDouble(valueInterval.getText());
                kw = Double.parseDouble(valueKw.getText());
                signal = new SygnalTrojkatny(Amplituda, tBegin, signalTime, interval, kw, freq);
                break;
            case 9:
                signalTime = Double.parseDouble(valueSignalTime.getText());
                ts = Double.parseDouble(valueTs.getText());
                signal = new SkokJednostkowy(Amplituda, tBegin, signalTime, ts, freq);
                break;
            case 10:
                ns = Integer.parseInt(valueNs.getText());
                samples = Integer.parseInt(valueSamples.getText());
                freq = Integer.parseInt(valueFreq.getText());
                // SygnalDyskretny s10 = new SygnalDyskretny(Amplituda, tBegin, ns, samples,
                // freq);
                signal = new ImpulsJednostkowy(Amplituda, tBegin, ns, samples, freq);
                // plotChart.plotChartAndHistogram(s10);
                // signalList.add(s10);
                break;
            case 11:
                signalTime = Double.parseDouble(valueSignalTime.getText());
                freq = Integer.parseInt(valueFreq.getText());
                probability = Double.parseDouble(valueProbability.getText());
                signal = new SzumImpulsowy(Amplituda, tBegin, signalTime, freq, probability);
                // SygnalDyskretny s11 = new SygnalDyskretny(Amplituda, tBegin, signalTime,
                // freq, probability);
                // plotChart.plotChartAndHistogram(s11);
                // signalList.add(s11);
                break;
        }
        PlotChart.plotChartAndHistogram(signal, histogramCompartments);
        signalList.add(signal); // dodaje wygenerowany sygnal do arraylisty sygnalow
        model.addElement(signalList.size() + ") " + signal.StringToJlist());// dodaje kolejny element do jList (listy
        // sygnalow)
    }// GEN-LAST:event_ButtonGenerateSignalActionPerformed

    private void ButtonGenerateSignalKeyPressed(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_ButtonGenerateSignalKeyPressed
        // TODO add your handling code here:
    }// GEN-LAST:event_ButtonGenerateSignalKeyPressed

    private void ButtonShowSignalChartActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ButtonShowSignalChartActionPerformed
        histogramCompartments = Integer.parseInt(valueHistogramCompartments.getText());
        PlotChart.plotChartAndHistogram(signalList.get(jList1.getSelectedIndex()), histogramCompartments);
    }// GEN-LAST:event_ButtonShowSignalChartActionPerformed

    private void ButtonShowSignalChartKeyPressed(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_ButtonShowSignalChartKeyPressed
        // TODO add your handling code here:
    }// GEN-LAST:event_ButtonShowSignalChartKeyPressed

    private void ButtonAddSignalsActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ButtonAddSignalsActionPerformed
        int[] tab = jList1.getSelectedIndices(); // zwraca indeksy zaznaczonych elementow z jList
        signal = addingSignals(signalList.get(tab[0]), signalList.get(tab[1]), tab);
        signalList.add(signal);
        model.addElement(signalList.size() + ") " + signal.signalName);
        histogramCompartments = Integer.parseInt(valueHistogramCompartments.getText());
        PlotChart.plotChartAndHistogram(signal, histogramCompartments);
    }// GEN-LAST:event_ButtonAddSignalsActionPerformed

    private void ButtonSubtractionActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ButtonSubtractionActionPerformed
        int[] tab = jList1.getSelectedIndices(); // zwraca indeksy zaznaczonych elementow z jList
        signal = substractSignals(signalList.get(tab[0]), signalList.get(tab[1]), tab);
        signalList.add(signal);
        model.addElement(signalList.size() + ") " + signal.signalName);
        histogramCompartments = Integer.parseInt(valueHistogramCompartments.getText());
        PlotChart.plotChartAndHistogram(signal, histogramCompartments);
    }// GEN-LAST:event_ButtonSubtractionActionPerformed

    private void ButtonMultiplicationActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ButtonMultiplicationActionPerformed
        int[] tab = jList1.getSelectedIndices(); // zwraca indeksy zaznaczonych elementow z jList
        signal = multiplySignals(signalList.get(tab[0]), signalList.get(tab[1]), tab);
        signalList.add(signal);
        model.addElement(signalList.size() + ") " + signal.signalName);
        histogramCompartments = Integer.parseInt(valueHistogramCompartments.getText());
        PlotChart.plotChartAndHistogram(signal, histogramCompartments);
    }// GEN-LAST:event_ButtonMultiplicationActionPerformed

    private void ButtonDivisionActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ButtonDivisionActionPerformed
        int[] tab = jList1.getSelectedIndices(); // zwraca indeksy zaznaczonych elementow z jList
        signal = divisionSignals(signalList.get(tab[0]), signalList.get(tab[1]), tab);
        signalList.add(signal);
        model.addElement(signalList.size() + ") " + signal.signalName);
        histogramCompartments = Integer.parseInt(valueHistogramCompartments.getText());
        PlotChart.plotChartAndHistogram(signal, histogramCompartments);
    }// GEN-LAST:event_ButtonDivisionActionPerformed

    private void ButtonSave2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ButtonSave2ActionPerformed

        int odpowiedz = jFileChooserSaveFile.showSaveDialog(this);

        if (odpowiedz == jFileChooserSaveFile.APPROVE_OPTION) {
            File file = jFileChooserSaveFile.getSelectedFile();
            Sygnal signalToSave = signalList.get(jList1.getSelectedIndex());// pobiera zaznaczony sygnal
            saveToFile(signalToSave, file);
        }
    }// GEN-LAST:event_ButtonSave2ActionPerformed

    private void ButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ButtonOpenActionPerformed
        int odpowiedz = jFileChooserOpenFile.showOpenDialog(this);

        if (odpowiedz == jFileChooserOpenFile.APPROVE_OPTION) {
            File fileOpen = jFileChooserOpenFile.getSelectedFile();
            Sygnal signalFromFile = importFromFile(fileOpen);
            signalList.add(signalFromFile);
            model.addElement(signalList.size() + ") " + signalFromFile.StringToJlist() + " - import");
        }
    }// GEN-LAST:event_ButtonOpenActionPerformed

    /**
     * @param args
     *            the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        // </editor-fold>`

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAddSignals;
    private javax.swing.JButton ButtonDivision;
    private javax.swing.JButton ButtonGenerateSignal;
    private javax.swing.JButton ButtonMultiplication;
    private javax.swing.JButton ButtonOpen;
    private javax.swing.JButton ButtonSave2;
    private javax.swing.JButton ButtonShowSignalChart;
    private javax.swing.JButton ButtonSubtraction;
    private javax.swing.JComboBox<String> choiceSignal;
    private javax.swing.JFileChooser jFileChooserOpenFile;
    private javax.swing.JFileChooser jFileChooserSaveFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField valueAmplituda;
    private javax.swing.JTextField valueFreq;
    private javax.swing.JTextField valueHistogramCompartments;
    private javax.swing.JTextField valueInterval;
    private javax.swing.JTextField valueKw;
    private javax.swing.JTextField valueNs;
    private javax.swing.JTextField valueProbability;
    private javax.swing.JTextField valueSamples;
    private javax.swing.JTextField valueSignalTime;
    private javax.swing.JTextField valueTbegin;
    private javax.swing.JTextField valueTs;
    // End of variables declaration//GEN-END:variables
}
